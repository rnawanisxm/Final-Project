{"version":3,"file":"export-map.js","mappings":"4KAMMA,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAAA,EAAU,CACZC,OAAQ,IAAIC,EAAAA,IAEd,IAAIC,EAAAA,EAAY,CACdF,OAAQ,IAAIG,EAAAA,EAAa,CACvBC,IAAK,iCACLC,OAAQ,IAAIC,EAAAA,IAEdC,QAAS,MAGbC,OAAQ,MACRC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVC,SAASC,eAAe,cAAcC,iBAAiB,SAAS,WAC9DnB,EAAIoB,KAAK,kBAAkB,WACzB,IAAMC,EAAYJ,SAASK,cAAc,UACnCC,EAAOvB,EAAIwB,UACjBH,EAAUI,MAAQF,EAAK,GACvBF,EAAUK,OAASH,EAAK,GACxB,IAAMI,EAAaN,EAAUO,WAAW,MAsBxC,GArBAC,MAAMC,UAAUC,QAAQC,KACtBf,SAASgB,iBAAiB,qBAC1B,SAAUC,GACR,GAAIA,EAAOT,MAAQ,EAAG,CACpB,IAAMd,EAAUuB,EAAOC,WAAWC,MAAMzB,QACxCgB,EAAWU,YAA0B,KAAZ1B,EAAiB,EAAI2B,OAAO3B,GACrD,IAEM4B,EAFYL,EAAOE,MAAMI,UAG5BC,MAAM,wBAAwB,GAC9BC,MAAM,KACN1C,IAAIsC,QAEPK,yBAAyBb,UAAUc,aAAaC,MAC9ClB,EACAY,GAEFZ,EAAWmB,UAAUZ,EAAQ,EAAG,OAIlCa,UAAUC,WAEZD,UAAUC,WAAW3B,EAAU4B,WAAY,eACtC,CACL,IAAMC,EAAOjC,SAASC,eAAe,kBACrCgC,EAAKC,KAAO9B,EAAU+B,YACtBF,EAAKG,YAGTrD,EAAIsD,kB","sources":["webpack:///./export-map.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    new VectorLayer({\n      source: new VectorSource({\n        url: 'data/geojson/countries.geojson',\n        format: new GeoJSON(),\n      }),\n      opacity: 0.5,\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\ndocument.getElementById('export-png').addEventListener('click', function () {\n  map.once('rendercomplete', function () {\n    const mapCanvas = document.createElement('canvas');\n    const size = map.getSize();\n    mapCanvas.width = size[0];\n    mapCanvas.height = size[1];\n    const mapContext = mapCanvas.getContext('2d');\n    Array.prototype.forEach.call(\n      document.querySelectorAll('.ol-layer canvas'),\n      function (canvas) {\n        if (canvas.width > 0) {\n          const opacity = canvas.parentNode.style.opacity;\n          mapContext.globalAlpha = opacity === '' ? 1 : Number(opacity);\n          const transform = canvas.style.transform;\n          // Get the transform parameters from the style's transform matrix\n          const matrix = transform\n            .match(/^matrix\\(([^\\(]*)\\)$/)[1]\n            .split(',')\n            .map(Number);\n          // Apply the transform to the export map context\n          CanvasRenderingContext2D.prototype.setTransform.apply(\n            mapContext,\n            matrix\n          );\n          mapContext.drawImage(canvas, 0, 0);\n        }\n      }\n    );\n    if (navigator.msSaveBlob) {\n      // link download attribute does not work on MS browsers\n      navigator.msSaveBlob(mapCanvas.msToBlob(), 'map.png');\n    } else {\n      const link = document.getElementById('image-download');\n      link.href = mapCanvas.toDataURL();\n      link.click();\n    }\n  });\n  map.renderSync();\n});\n"],"names":["map","Map","layers","TileLayer","source","OSM","VectorLayer","VectorSource","url","format","GeoJSON","opacity","target","view","View","center","zoom","document","getElementById","addEventListener","once","mapCanvas","createElement","size","getSize","width","height","mapContext","getContext","Array","prototype","forEach","call","querySelectorAll","canvas","parentNode","style","globalAlpha","Number","matrix","transform","match","split","CanvasRenderingContext2D","setTransform","apply","drawImage","navigator","msSaveBlob","msToBlob","link","href","toDataURL","click","renderSync"],"sourceRoot":""}