{"version":3,"file":"geojson-vt.js","mappings":"uLAYMA,EAAW,SAAUC,EAAKC,GAC9B,GAAIA,EAAMC,SAAU,CAClB,IAAIC,EACEC,EAAUH,EAAME,KAClBD,EAAWD,EAAMC,SAsBrB,OApBgB,IAAZE,GACFD,EAAO,aACgB,GAAnBD,EAASG,SACXF,EAAO,QACPD,EAAWA,EAAS,KAED,IAAZE,GACTD,EAAO,kBACgB,GAAnBD,EAASG,SACXF,EAAO,aACPD,EAAWA,EAAS,KAED,IAAZE,IACTD,EAAO,UACHD,EAASG,OAAS,IACpBF,EAAO,eACPD,EAAW,CAACA,KAIT,CACL,KAAQ,UACR,SAAY,CACV,KAAQC,EACR,YAAeD,GAEjB,WAAcD,EAAMK,MAGtB,OAAOL,GAILM,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAAA,EAAU,CACZC,OAAQ,IAAIC,EAAAA,KAGhBC,OAAQ,MACRC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAKVC,MADY,kCAETC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUE,GACd,IAAMC,EAAYC,UAAUF,EAAM,CAChCG,OAAQ,KACRC,MAAO,IAEHC,EAAS,IAAIC,EAAAA,EAAQ,CAEzBC,eAAgB,IAAIC,EAAAA,EAAW,CAC7BC,KAAM,cACNC,MAAO,cACPP,OAAQ,CAAC,EAAG,EAAG,KAAM,UAGnBQ,EAAe,IAAIC,EAAAA,EAAiB,CACxCC,gBAAiB,SAAUC,GAEzB,OAAOC,KAAKC,UAAUF,IAExBG,iBAAkB,SAAUC,EAAMC,GAChC,IAAML,EAAYC,KAAKK,MAAMD,GACvBE,EAAOpB,EAAUqB,QACrBR,EAAU,GACVA,EAAU,GACVA,EAAU,IAENS,EAAUR,KAAKC,UACnB,CACElC,KAAM,oBACN0C,SAAUH,EAAOA,EAAKG,SAAW,IAEnC9C,GAEI8C,EAAWnB,EAAOoB,aAAaF,EAAS,CAC5CpB,OAAQQ,EAAae,cAAcC,mBAAmBb,GACtDc,kBAAmB1C,EAAI2C,UAAUC,kBAEnCZ,EAAKa,YAAYP,MAGfQ,EAAc,IAAIC,EAAAA,EAAgB,CACtC3C,OAAQqB,IAEVzB,EAAIgD,SAASF,Q","sources":["webpack:///./geojson-vt.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport Projection from '../src/ol/proj/Projection.js';\nimport VectorTileSource from '../src/ol/source/VectorTile.js';\nimport View from '../src/ol/View.js';\nimport {\n  Tile as TileLayer,\n  VectorTile as VectorTileLayer,\n} from '../src/ol/layer.js';\n\n// Converts geojson-vt data to GeoJSON\nconst replacer = function (key, value) {\n  if (value.geometry) {\n    let type;\n    const rawType = value.type;\n    let geometry = value.geometry;\n\n    if (rawType === 1) {\n      type = 'MultiPoint';\n      if (geometry.length == 1) {\n        type = 'Point';\n        geometry = geometry[0];\n      }\n    } else if (rawType === 2) {\n      type = 'MultiLineString';\n      if (geometry.length == 1) {\n        type = 'LineString';\n        geometry = geometry[0];\n      }\n    } else if (rawType === 3) {\n      type = 'Polygon';\n      if (geometry.length > 1) {\n        type = 'MultiPolygon';\n        geometry = [geometry];\n      }\n    }\n\n    return {\n      'type': 'Feature',\n      'geometry': {\n        'type': type,\n        'coordinates': geometry,\n      },\n      'properties': value.tags,\n    };\n  } else {\n    return value;\n  }\n};\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nconst url = 'data/geojson/countries.geojson';\nfetch(url)\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (json) {\n    const tileIndex = geojsonvt(json, {\n      extent: 4096,\n      debug: 1,\n    });\n    const format = new GeoJSON({\n      // Data returned from geojson-vt is in tile pixel units\n      dataProjection: new Projection({\n        code: 'TILE_PIXELS',\n        units: 'tile-pixels',\n        extent: [0, 0, 4096, 4096],\n      }),\n    });\n    const vectorSource = new VectorTileSource({\n      tileUrlFunction: function (tileCoord) {\n        // Use the tile coordinate as a pseudo URL for caching purposes\n        return JSON.stringify(tileCoord);\n      },\n      tileLoadFunction: function (tile, url) {\n        const tileCoord = JSON.parse(url);\n        const data = tileIndex.getTile(\n          tileCoord[0],\n          tileCoord[1],\n          tileCoord[2]\n        );\n        const geojson = JSON.stringify(\n          {\n            type: 'FeatureCollection',\n            features: data ? data.features : [],\n          },\n          replacer\n        );\n        const features = format.readFeatures(geojson, {\n          extent: vectorSource.getTileGrid().getTileCoordExtent(tileCoord),\n          featureProjection: map.getView().getProjection(),\n        });\n        tile.setFeatures(features);\n      },\n    });\n    const vectorLayer = new VectorTileLayer({\n      source: vectorSource,\n    });\n    map.addLayer(vectorLayer);\n  });\n"],"names":["replacer","key","value","geometry","type","rawType","length","tags","map","Map","layers","TileLayer","source","OSM","target","view","View","center","zoom","fetch","then","response","json","tileIndex","geojsonvt","extent","debug","format","GeoJSON","dataProjection","Projection","code","units","vectorSource","VectorTileSource","tileUrlFunction","tileCoord","JSON","stringify","tileLoadFunction","tile","url","parse","data","getTile","geojson","features","readFeatures","getTileGrid","getTileCoordExtent","featureProjection","getView","getProjection","setFeatures","vectorLayer","VectorTileLayer","addLayer"],"sourceRoot":""}